package web.org.perfmon4j.restdatasource.data;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.ws.rs.BadRequestException;

import org.perfmon4j.RegisteredDatabaseConnections;

public abstract class ID implements Comparable<ID> {
	private final String databaseID;
	private final String displayable;
	private final String sortable;
	private static final Pattern VALID_DATABASE_ID_PATTERN =
			Pattern.compile("\\w{4}\\-\\w{4}");
	
	private static final Pattern SYSTEM_ID_PATTERN =
			Pattern.compile("(\\w{4}\\-\\w{4})\\.(\\d+)");
	
	private static final Pattern GROUP_ID_PATTERN =
			Pattern.compile("(\\w{4}\\-\\w{4})\\.GROUP\\.(\\d+)");
	
	protected ID(String databaseID, String sortable, String displayable) throws BadIDException {
		this.databaseID = databaseID;
		// Validate the databaseID
		if (!VALID_DATABASE_ID_PATTERN.matcher(databaseID).matches()) {
			throw new BadIDException("Invalid databaseID: " + databaseID);
		}
		this.sortable = sortable;
		this.displayable = displayable;
	}
	
	public static ID parse(String id) throws BadIDException {
		ID result = null;
		Matcher matcher = SYSTEM_ID_PATTERN.matcher(id); 
		if (matcher.matches()) {
			result = new SystemID(matcher.group(1), Long.parseLong(matcher.group(2)));
		} else {
			matcher = GROUP_ID_PATTERN.matcher(id);
			if (matcher.matches()) {
				result = new GroupID(matcher.group(1), Long.parseLong(matcher.group(2)));
			}
		}
		
		if (result == null) {
			throw new BadIDException("Unable to parse ID: " + id);
		}
		
		return result;
	}

	public static ID[] parseMultiple(String ids, String expectedDatabaseID) throws BadIDException {
		List<ID> result = new ArrayList<ID>();
		
		for (String s : ids.split("~")) {
			ID id = ID.parse(s);
			if (!expectedDatabaseID.equals(id.getDatabaseID())) {
				throw new BadIDException("ID does not match expected database");
			}
			result.add(id);
		}
		return result.toArray(new ID[]{});
	}

	
	/**
	 * DatabaseID are randomly generated by the perfmon4j 
	 * database appender and  are always composed 
	 * of <4 word characters>-<4 word characters>.
	 * 
	 * Examples:
	 * 	ABCD-14YU,  XYZ4-54SR
	 * @return
	 */
	public String getDatabaseID() {
		return databaseID;
	}

	/**
	 * Derived classes must return true for group or system
	 * @return
	 */
	public boolean isGroup() {
		return false;
	}
	
	/**
	 * Derived classes must return true for group or system
	 * @return
	 */
	public boolean isSystem() {
		return false;
	}
	
	@Override
	public String toString() {
		return displayable;
	}

	@Override
	public int compareTo(ID o) {
		return this.sortable.compareTo(o.sortable);
	}

	@Override
	public int hashCode() {
		return sortable.hashCode();
	}

	@Override
	public boolean equals(Object o) {
		if (this==o) {
			return true;
		} else if (o==null) {
			return false;
		} else if (!(o instanceof ID)) {
			return false;
		} else {
			return this.sortable.equals(((ID)o).sortable);
		}
	}

	public String getDisplayable() {
		return displayable;
	}

	public String getSortable() {
		return sortable;
	}
	
	public void validateMatchesDatabase(RegisteredDatabaseConnections.Database db) {
		String expectedDatabaseID = db.getID();
		if (!databaseID.equals(expectedDatabaseID)) {
			throw new BadRequestException("SystemID must match the specified database(" + expectedDatabaseID + "): " 
	              + getDisplayable());
		}
	}
	
	public static String buildArrayString(ID ids[]) {
		String result = "";
		for (ID s : ids) {
			if (!result.isEmpty()) {
				result += "~";
			}
			result += s.toString();
		}
		return result;
	}
}
