/*
 *	Copyright 2011 Follett Software Company 
 *
 *	This file is part of PerfMon4j(tm).
 *
 * 	Perfmon4j is free software: you can redistribute it and/or modify
 * 	it under the terms of the GNU Lesser General Public License, version 3,
 * 	as published by the Free Software Foundation.  This program is distributed
 * 	WITHOUT ANY WARRANTY OF ANY KIND, WITHOUT AN IMPLIED WARRANTY OF MERCHANTIBILITY,
 * 	OR FITNESS FOR A PARTICULAR PURPOSE.  You should have received a copy of the GNU Lesser General Public 
 * 	License, Version 3, along with this program.  If not, you can obtain the LGPL v.s at 
 * 	http://www.gnu.org/licenses/
 * 	
 * 	perfmon4j@fsc.follett.com
 * 	David Deuchert
 * 	Follett Software Company
 * 	1391 Corporate Drive
 * 	McHenry, IL 60050
 * 
*/

package org.perfmon4j.visualvm;

import java.util.HashMap;
import java.util.Map;
import org.perfmon4j.remotemanagement.intf.FieldKey;
import org.perfmon4j.remotemanagement.intf.MonitorKey;
import org.perfmon4j.visualvm.chart.FieldManager;

/**
 *
 * @author ddeucher
 */
public class ThreadTraceOptionsDlg extends javax.swing.JDialog {
    private Map<String, String> result = null;
    
    /** Creates new form ThreadTraceOptions */
    public ThreadTraceOptionsDlg(MainWindow mainWindow) {
        super(mainWindow.getParentFrame(), true);
        initComponents();
    }
    
    public static void doScheduleThreadTrace(MainWindow mainWindow,
            MonitorKey key) {
        
        if (mainWindow.threadTraceOptionsDlg == null) {
            mainWindow.threadTraceOptionsDlg = new ThreadTraceOptionsDlg(mainWindow);
        }
        ThreadTraceOptionsDlg dlg = mainWindow.threadTraceOptionsDlg;
        
        dlg.result = null;
        
        dlg.monitorNameTextField.setText(key.getName());
        dlg.setDefaultCloseOperation(HIDE_ON_CLOSE);
        dlg.pack();
        dlg.setLocationRelativeTo(mainWindow.getParentFrame());        
        dlg.setVisible(true);

        if (dlg.result != null) {
            mainWindow.getFieldManager().scheduleThreadTrace(key, dlg.result);
            mainWindow.bringThreadTraceWindowToFront();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        minDurationToCaptureField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        maxDepthField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        monitorNameTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.title")); // NOI18N
        setResizable(false);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.jLabel1.text")); // NOI18N

        minDurationToCaptureField.setText(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.minDurationToCaptureField.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.jLabel2.text")); // NOI18N

        maxDepthField.setText(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.maxDepthField.text")); // NOI18N

        okButton.setText(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.jLabel3.text")); // NOI18N

        monitorNameTextField.setEditable(false);
        monitorNameTextField.setText(org.openide.util.NbBundle.getMessage(ThreadTraceOptionsDlg.class, "ThreadTraceOptionsDlg.monitorNameTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monitorNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxDepthField, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                            .addComponent(minDurationToCaptureField, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addGap(10, 10, 10)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(monitorNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(minDurationToCaptureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(maxDepthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        result = new HashMap<String, String>();
        String maxDepth = maxDepthField.getText();
        String minDur = minDurationToCaptureField.getText();
        
        if (maxDepth != null && !"".equals(maxDepth)) {
            // TODO should check for non-numeric and or negative values...
            result.put(FieldKey.THREAD_TRACE_MAX_DEPTH_ARG, maxDepth);
        }
        
        if (minDur != null && !"".equals(minDur)) {
            // TODO should check for non-numeric and or negative values...
            result.put(FieldKey.THREAD_TRACE_MIN_DURATION_ARG, minDur);
        }
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.result = null;
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField maxDepthField;
    private javax.swing.JTextField minDurationToCaptureField;
    private javax.swing.JTextField monitorNameTextField;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
